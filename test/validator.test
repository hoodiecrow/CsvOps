package require tcltest
namespace import ::tcltest::*

configure {*}$argv

loadTestedCommands

package require csvops

array set options {
    -alternate 0
    -separator \;
    -delimiter \"
    -convert-decimal {read write}
}

test validator_one-of-1.0 {one-of:} -setup {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}
} -body {
    set res {}
    $r eval {SELECT * FROM t1} {
        if {$c ni {1 3}} {
            lappend res $c
        }
    }
    set res
} -cleanup {
    $r destroy
} -result {4 2}


test validator_one-of-1.1 {one-of:} -setup {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE c NOT IN (1, 3)}
} -cleanup {
    $r destroy
} -result {{a b c d} {2 3 4 1} {4 1 2 3}}


test validator_matches-1.0 {matches:} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {'fio' 'bar'} {'foo' 'bar'} {'fie' 'baz'} {'foo' 'qux'}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE a LIKE 'f_o'}
} -cleanup {
    $r destroy
} -result {{a b} {fio bar} {foo bar} {foo qux}}


test validator_validate-1.0 {validate:} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {'fio' 'bar'} {'foo' 'bar'} {'fie' 'baz'} {'foo' 'qux'}
    $r function validate {regexp {f([aou])\1}}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE validate(a)}
} -cleanup {
    $r destroy
} -result {{a b} {foo bar} {foo qux}}


test validator_validate-1.1 {validate:} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {'fio' 'bar'} {'foo' 'bar'} {'fie' 'baz'} {'foo' 'qux'}
    $r function validate {apply {{a b} {expr {
        [regexp {f([aou])\1} $a] && [string match b* $b]
    }}}}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE validate(a, b)}
} -cleanup {
    $r destroy
} -result {{a b} {foo bar}}


cleanupTests

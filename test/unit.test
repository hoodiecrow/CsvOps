package require tcltest

::tcltest::configure {*}$argv

::tcltest::testConstraint skip 0
::tcltest::testConstraint noskip 1
foreach unit {
    row_to_array row_to_vars count_rows get_column compare_columns handle_empties

    convert_date write_table

    utils_anon utils_dbjoin
    utils_dayDistance utils_serialCompareEqual
    utils_serialCompareEqualDecimal utils_serialCompareEmpty
    
    result_intersect result_except result_range result_order_by result_select

    validator_oneOf validator_matches validator_validate 

    presentation_tally dump_html 

} {
    ::tcltest::testConstraint $unit 1
}

package require sqlite3

::tcltest::loadTestedCommands

package require conf
conf msgcat [namespace current]

#source [file join H:/starkits csvops.kit]
namespace eval ::starkit [list variable topdir [file join .. topdir]]
set ::argv {} ; package require csvops

foreach file [glob -dir [file join .. topdir lib csvops ssrc] *.tcl] {
    source $file
}

file copy -force [file join [::tcltest::configure -testdir] eval.csv] [::tcltest::configure -tmpdir]

# NOTE viewFile suppresses ending newline

# Features (mostly) replaced by sql application
::tcltest::test all-the-sql-1.0 {} -setup {
    set db [DB new]
    set res {}
} -body {
    set res {}
} -cleanup {
    $db destroy
} -result {}

# Interface to sql
::tcltest::test sql-methods-1.0 {} -setup {
    ::tcltest::makeFile "foo;bar;baz\n0;foo;ab\n1;snarf;cd\n2;blue;ef" a.csv
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set db [DB new]
    $db readTable t1 [file join [::tcltest::configure -tmpdir] a.csv]
    set res {}
} -body {
    # SELECT * FROM t1;
    lappend res [$db select t1]
    # SELECT foo, bar FROM t1;
    lappend res [$db select t1 foo bar]
    set res
} -cleanup {
    $db destroy
    log::lvSuppressLE i 1
    array unset ::options
} -result {{0 foo ab 1 snarf cd 2 blue ef} {0 foo 1 snarf 2 blue}}

# db borrowed from https://www.w3schools.com/sql
::tcltest::makeFile [join [list \
{CustomerID;CustomerName;ContactName;Address;City;PostalCode;Country} \
{1;Alfreds Futterkiste;Maria Anders;Obere Str. 57;Berlin;12209;Germany} \
{2;Ana Trujillo Emparedados y helados;Ana Trujillo;Avda. de la Constitución 2222;México D.F.;05021;Mexico} \
{3;Antonio Moreno Taquería;Antonio Moreno;Mataderos 2312;México D.F.;05023;Mexico} \
{4;Around the Horn;Thomas Hardy;120 Hanover Sq.;London;WA1 1DP;UK} \
{5;Berglunds snabbköp;Christina Berglund;Berguvsvägen 8;Luleå;S-958 22;Sweden}] \n] a.csv
::tcltest::makeFile [join [list \
{CustomerID;CustomerName;ContactName;Address;City;PostalCode;Country} \
{89;White Clover Markets;Karl Jablonski;305 - 14th Ave. S. Suite 3B;Seattle;98128;USA} \
{90;Wilman Kala;Matti Karttunen;Keskuskatu 45;Helsinki;21240;Finland} \
{91;Wolski;Zbyszek;ul. Filtrowa 68;Walla;01-012;Poland}] \n] b.csv
::tcltest::makeFile [join [list \
{OrderID;CustomerID;OrderDate} \
{10308;2;1996-09-18} \
{10309;4;1996-09-19} \
{10310;77;1996-09-20}] \n] c.csv
::tcltest::makeFile [join [list \
{SupplierID;SupplierName;ContactName;Address;City;PostalCode;Country} \
{1;Exotic Liquid;Charlotte Cooper;49 Gilbert St.;London;EC1 4SD;UK} \
{2;New Orleans Cajun Delights;Shelley Burke;P.O. Box 78934;New Orleans;70117;USA} \
{3;Grandma Kelly's Homestead;Regina Murphy;707 Oxford Rd.;Ann Arbor;48104;USA}] \n] d.csv

::tcltest::test sql-methods-1.1 {} -setup {
    set ::options(-separator) \;
    set ::options(-alternate) 0
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set res {}
} -body {
    set db [DB new]
    $db readTable Customers [file join [::tcltest::configure -tmpdir] a.csv]
    # SELECT Country FROM Customers
    lappend res [$db select Customers Country]
    lappend res [$db eval {SELECT DISTINCT Country FROM Customers}]
    lappend res [$db eval {SELECT COUNT(DISTINCT Country) FROM Customers}]
    lappend res [$db eval {SELECT CustomerID FROM Customers WHERE Country='Mexico'}]
    lappend res [$db eval {SELECT CustomerID FROM Customers WHERE CustomerID=1}]
    lappend res [$db eval {SELECT CustomerID FROM Customers WHERE Country='Germany' AND City='Berlin'}]
    lappend res [$db eval {SELECT CustomerID FROM Customers WHERE City='Berlin' OR City='München'}]
    lappend res [$db eval {SELECT CustomerID FROM Customers WHERE NOT Country='Germany'}]
    lappend res [$db eval {SELECT CustomerID FROM Customers ORDER BY Country}]
    lappend res [$db eval {SELECT CustomerID FROM Customers ORDER BY Country DESC}]
    $db destroy
    set db [DB new]
    $db readTable Customers [file join [::tcltest::configure -tmpdir] b.csv]
    # INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
    # VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
    set columns {CustomerName,ContactName,Address,City,PostalCode,Country}
    set values  {'Cardinal','Tom B. Erichsen','Skagen 21','Stavanger',4006,'Norway'}
    $db insert Customers $columns $values
    lappend res [$db select Customers Country]
    set res
} -cleanup {
    catch {$db destroy}
    log::lvSuppressLE i 1
    array unset ::options
} -result {{Germany Mexico Mexico UK Sweden} {Germany Mexico UK Sweden} 4 {2 3} 1 1 1 {2 3 4 5} {1 2 3 5 4} {4 5 2 3 1} {USA Finland Poland Norway}}

::tcltest::test sql-methods-1.2 {} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set res {}
} -body {
    set db [DB new]
    $db readTable Customers [file join [::tcltest::configure -tmpdir] a.csv]
    $db readTable Orders [file join [::tcltest::configure -tmpdir] c.csv]
    lappend res [$db dict {
        SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
        FROM Orders
        INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID
    }]
    lappend res [$db dict {
        SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
        FROM Orders
        LEFT JOIN Customers ON Orders.CustomerID=Customers.CustomerID
    }]
    set res
} -cleanup {
    catch {$db destroy}
    array unset ::options
} -result {{* {OrderID CustomerName OrderDate} 1 {10308 {Ana Trujillo Emparedados y helados} 1996-09-18} 2 {10309 {Around the Horn} 1996-09-19}} {* {OrderID CustomerName OrderDate} 1 {10308 {Ana Trujillo Emparedados y helados} 1996-09-18} 2 {10309 {Around the Horn} 1996-09-19} 3 {10310 {} 1996-09-20}}}

::tcltest::test sql-methods-1.3 {} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set res {}
} -body {
    set db [DB new]
    $db readTable Customers [file join [::tcltest::configure -tmpdir] a.csv]
    $db readTable Suppliers [file join [::tcltest::configure -tmpdir] d.csv]
    lappend res [$db eval {
        SELECT City FROM Customers
        UNION
        SELECT City FROM Suppliers
        ORDER BY City;
    }]
    lappend res [$db eval {
        SELECT City FROM Customers
        UNION ALL
        SELECT City FROM Suppliers
        ORDER BY City;
    }]
    set res
} -cleanup {
    catch {$db destroy}
    array unset ::options
} -result {{{Ann Arbor} Berlin London Luleå {México D.F.} {New Orleans}} {{Ann Arbor} Berlin London London Luleå {México D.F.} {México D.F.} {New Orleans}}}

::tcltest::test convert_date-1.0 {} -constraints {convert_date} -setup {
    set db [DB new]
    $db create t1 a b c
    $db fillTable t1 {1 'foo' '2018-01-28'} {2 'bar' '2018-01-29'}
} -body {
    $db function datecvt {apply {date {
        set d [clock scan $date -format %Y-%m-%d]
        clock format $d -format %y-%m-%d
    }}}
    $db eval {UPDATE t1 SET c=datecvt(c)}
    $db eval {SELECT c FROM t1}
} -cleanup {
    $db destroy
} -result {18-01-28 18-01-29}


::tcltest::test row_to_array-1.0 {get:} -constraints {row_to_array} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;\n2;b;29\n3;c;23" foobar.csv
    set r [DB new]
    $r create t1 foo bar baz
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
} -body {
    $r eval {SELECT * FROM t1 LIMIT 0,1} F continue
    $r eval {SELECT * FROM t1 LIMIT 1,1} G continue
    list $F(foo) $G(foo)
} -cleanup {
    $r destroy
    unset F
    array unset ::options
} -result {1 2}


::tcltest::test loadTable-1.0 {get:} -constraints {row_to_array} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) ,
    set ::options(-delimiter) \"
    set ::options(-oseparator) ,
    set ::options(-convert-decimal) read
    ::tcltest::makeFile {} foobar.csv
    set r [DB new]
    $r create t1 a b c d e
} -body {
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] eval.csv]
    $r dumpTable -values t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    ::tcltest::viewFile foobar.csv
} -cleanup {
    $r destroy
    array unset ::options
    log::lvSuppressLE i 1
} -result {023,EVAL cmd eval in list obj var,26,45,57.78
024,EVAL cmd eval as list,23,42,54.76
025,EVAL cmd eval as string,53,92,57.61
026,EVAL cmd and mixed lists,3805,11276,33.74
027,EVAL list cmd and mixed lists,3812,11325,33.66
028,EVAL list cmd and pure lists,592,1598,37.05}


::tcltest::test row_to_vars-1.1 {get:} -constraints {noskip row_to_vars} -setup {
    set p [DB new]
    $p create t1 a b c d
    $p fillTable t1 {1 2 3 4} {5 6 7 8}
    set res {}
} -body {
    $p eval {SELECT * FROM t1} {
        lappend res $c
    }
    set res
} -cleanup {
    $p destroy
} -result {3 7}


::tcltest::test count_rows-1.0 {rows:} -constraints {noskip count_rows} -setup {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {5 6 7 8}
} -body {
    $r eval {SELECT COUNT(*) FROM t1}
} -cleanup {
    $r destroy
} -result 2


::tcltest::test get_column-1.0 {getColumn:} -constraints {noskip get_column} -setup {
    set p [DB new]
    $p create t1 a b c d
    $p fillTable t1 {1 2 3 4} {5 6 7 8}
} -body {
    $p eval {SELECT c FROM t1}
} -cleanup {
    $p destroy
} -result {3 7}


::tcltest::test compare_columns-2.0 {getColumn: compare columns for equality} -constraints {compare_columns} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;\n2;b;29\n3;c;23" foobar.csv
    ::tcltest::makeFile "1;a;83\n2;b;29\n4;c;" bazqux.csv
    set r [DB new]
    $r create t1 foo bar baz
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    $r create t2 foo bar baz
    $r loadTable t2 [file join [::tcltest::configure -tmpdir] bazqux.csv]
} -body {
    set C [$r eval {SELECT foo FROM t1}]
    set D [$r eval {SELECT foo FROM t2}]
    set E [$r eval {SELECT bar FROM t1}]
    set F [$r eval {SELECT bar FROM t2}]
    list [expr {$C == $D}] [expr {$E == $F}]
} -cleanup {
    $r destroy
    unset C D E F
    array unset ::options
} -result {0 1}


::tcltest::test compare_columns-2.1 {getColumn: compare columns for numeric difference} -constraints {compare_columns} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;\n2;b;29\n3;c;23" foobar.csv
    ::tcltest::makeFile "1;a;83\n2;b;29\n4;c;" bazqux.csv
    set r [DB new]
    $r create t1 foo bar baz
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    $r create t2 foo bar baz
    $r loadTable t2 [file join [::tcltest::configure -tmpdir] bazqux.csv]
} -body {
    set C [$r eval {SELECT foo FROM t1}]
    set D [$r eval {SELECT foo FROM t2}]
    set s1 [::tcl::mathop::+ {*}$C]
    set s2 [::tcl::mathop::+ {*}$D]
    expr {$s2 - $s1}
} -cleanup {
    $r destroy
    unset C D s1 s2
    array unset ::options
} -result 1


::tcltest::test compare_columns-2.2 {getColumn: compare columns for numeric difference, with empty cells} -constraints {compare_columns} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;\n2;b;29\n3;c;23" foobar.csv
    ::tcltest::makeFile "1;a;83\n2;b;29\n4;c;" bazqux.csv
    set r [DB new]
    $r create t1 foo bar baz
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    $r create t2 foo bar baz
    $r loadTable t2 [file join [::tcltest::configure -tmpdir] bazqux.csv]
} -body {
    set s1 [$r eval {SELECT SUM(baz) FROM t1}]
    set s2 [$r eval {SELECT SUM(baz) FROM t2}]
    expr {int($s1 - $s2)}
} -cleanup {
    $r destroy
    unset s1 s2
    array unset ::options
} -result -60


::tcltest::test compare_columns-2.3 {getColumn: compare columns for numeric difference, decimal numbers} -constraints {compare_columns} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;;1,67\n2;b;29;2,05\n3;c;23;3" foobar.csv
    ::tcltest::makeFile "1;a;83;0,68\n2;b;29;4,12\n4;c;;1,05" bazqux.csv
    set r [DB new]
    $r create t1 foo bar baz qux
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    $r create t2 foo bar baz qux
    $r loadTable t2 [file join [::tcltest::configure -tmpdir] bazqux.csv]
} -body {
    set s1 [$r eval {SELECT SUM(qux) FROM t1}]
    set s2 [$r eval {SELECT SUM(qux) FROM t2}]
    expr {$s1 - $s2}
} -cleanup {
    $r destroy
    unset s1 s2
    array unset ::options
} -result 0.8700000000000001


::tcltest::test compare_columns-2.4 {getColumn: serial comparison for equality -- integer} -constraints {compare_columns} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;;1,67\n2;b;29;2,05\n3;c;23;3" foobar.csv
    ::tcltest::makeFile "1;a;83;0,68\n2;b;29;4,12\n4;c;;1,05" bazqux.csv
    set r [DB new]
    $r create t1 foo bar baz qux
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    $r create t2 foo bar baz qux
    $r loadTable t2 [file join [::tcltest::configure -tmpdir] bazqux.csv]
} -body {
    lmap s1 [$r eval {SELECT foo FROM t1}] s2 [$r eval {SELECT foo FROM t2}] {
        expr {$s1 eq $s2}
    }
} -cleanup {
    $r destroy
    unset s1 s2
    array unset ::options
} -result {1 1 0}


::tcltest::test compare_columns-2.5 {getColumn: serial comparison for equality -- string} -constraints {compare_columns} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;;1,67\n2;b;29;2,05\n3;c;23;3" foobar.csv
    ::tcltest::makeFile "1;a;83;0,68\n2;b;29;4,12\n4;c;;1,05" bazqux.csv
    set r [DB new]
    $r create t1 foo bar baz qux
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    $r create t2 foo bar baz qux
    $r loadTable t2 [file join [::tcltest::configure -tmpdir] bazqux.csv]
} -body {
    lmap s1 [$r eval {SELECT bar FROM t1}] s2 [$r eval {SELECT bar FROM t2}] {
        expr {$s1 eq $s2}
    }
} -cleanup {
    $r destroy
    unset s1 s2
    array unset ::options
} -result {1 1 1}


::tcltest::test compare_columns-2.6 {getColumn: serial comparison for equality -- decimal} -constraints {compare_columns} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;a;;1,67\n2;b;29;2,05\n3;c;23;1,0500" foobar.csv
    ::tcltest::makeFile "1;a;83;0,68\n2;b;29;4,12\n4;c;;1,05" bazqux.csv
    set r [DB new]
    $r create t1 foo bar baz qux
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] foobar.csv]
    $r create t2 foo bar baz qux
    $r loadTable t2 [file join [::tcltest::configure -tmpdir] bazqux.csv]
} -body {
    lmap s1 [$r eval {SELECT qux FROM t1}] s2 [$r eval {SELECT qux FROM t2}] {
        expr {$s1 eq $s2}
    }
} -cleanup {
    $r destroy
    unset s1 s2
    array unset ::options
} -result {0 0 1}


::tcltest::test handle_empties-1.0 {getColumnValues: skip nulls} -constraints {noskip handle_empties} -setup {
    set ::options(-separator) \;
    set p [DB new]
    $p create t1 a b c d
    $p fillTable t1 {1 2 3 4} {5 6 '' 8}
} -body {
    lmap val [$p eval {SELECT c FROM t1}] {if {$val ne {}} {set val} continue}
} -cleanup {
    $p destroy
    log::lvSuppressLE i 1
    array unset ::options
} -result 3


::tcltest::test handle_empties-1.1 {getColumnValues: set nulls to 0} -constraints {noskip handle_empties} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "1;2;3;4\n5;6;;8" empties.csv
    set p [DB new]
    $p create t1 a b c d
    $p loadTable t1 [file join [::tcltest::configure -tmpdir] empties.csv]
} -body {
    lmap val [$p eval {SELECT c FROM t1}] {if {$val ne {}} {set val} {expr 0}}
} -cleanup {
    $p destroy
    array unset ::options
} -result {3 0}


::tcltest::test presentation_tally-1.0 {tally:} -constraints {presentation_tally} -setup {
    set d [DB new]
    $d create t1 a b c
} -body {
    $d tally a
    $d tally b
    $d tally c
    $d insert t1 [$d tally]
    $d dict {SELECT * FROM t1}
} -cleanup {
    $d destroy
} -result {* {a b c} 1 {1 1 1}}


::tcltest::test presentation_tally-1.1 {tally:} -constraints {presentation_tally} -setup {
    set d [DB new]
    $d create t1 foo bar baz
} -body {
    $d tally foo
    $d tally foo
    $d tally foo
    $d tally bar
    $d tally bar
    $d tally baz
    $d insert t1 [$d tally]
    $d dict {SELECT * FROM t1}
} -cleanup {
    $d destroy
} -result {* {foo bar baz} 1 {3 2 1}}


::tcltest::test dump_html-1.0 {} -constraints {dump_html} -setup {
    set d [DB new]
    $d create t1 a b c
    $d fillTable t1 {45 89 23} {89 37 82}
} -body {
    $d html t1 Foobar
} -cleanup {
    $d destroy
} -result {<table>
<caption>Foobar</caption><tr>
<th></th><th>a</th><th>b</th><th>c</th>
</tr><tr>
<th>1</th><td>45</td><td>89</td><td>23</td>
</tr><tr>
<th>2</th><td>89</td><td>37</td><td>82</td>
</tr>
</table>}


::tcltest::test utils_anon-1.0 {anon:} -constraints {utils_anon} -setup {
    proc anon {table key} {
        # return a unique integer for each key
        variable anonkeyarr
        variable anonkeynum
        if {[info exists anonkeyarr($table,$key)]} {
            set anonkeyarr($table,$key)
        } else {
            set anonkeyarr($table,$key) [incr anonkeynum]
        }
    }
    set db [DB new]
    $db create t1 a b
    $db fillTable t1 {'foo' ''} {'bar' ''} {'foo' ''} {'baz' ''}
    $db function anonymize {apply {{table key} {anon $table $key}}}
} -body {
    $db eval {UPDATE t1 SET b=anonymize('t1', a)}
    $db eval {SELECT * FROM t1}
} -cleanup {
    $db destroy
} -result {foo 1 bar 2 foo 1 baz 3}


::tcltest::test utils_dayDistance-1.0 {dayDistance:} -constraints {utils_dayDistance} -setup {
    set db [DB new]
    $db create t1 a b
    $db fillTable t1 {'2018-01-01' ''} {'2018-01-02' ''}
} -body {
    $db eval {UPDATE t1 SET b=cast(round(julianday(a)-julianday('2018-01-01')) as int)}
    $db eval {SELECT b FROM t1}
} -cleanup {
    $db destroy
} -result {0 1}


::tcltest::test utils_dayDistance-1.1 {dayDistance:} -constraints {utils_dayDistance} -setup {
    set db [DB new]
    $db create t1 a b
    $db fillTable t1 {'2018-01-25' ''} {'2018-02-10' ''}
} -body {
    $db eval {UPDATE t1 SET b=cast(round(julianday(a)-julianday('2018-01-01')) as int)}
    $db eval {SELECT b FROM t1}
} -cleanup {
    $db destroy
} -result {24 40}


set STARKITS H:/starkits
set SANDBOX H:/code
if {![file exists $STARKITS]} {
    set STARKITS [file normalize [file join ~ starkits]]
    set SANDBOX [file normalize [file join ~ code]]
}

::tcltest::test result_intersect-1.0 {result_intersect:} -constraints {result_intersect} -setup {
    set r [DB new]
    $r create t1 a b c
    $r fillTable t1 {1 2 3} {2 3 1} {3 1 2} {3 1 2}
    $r create t2 a b c
    $r fillTable t2 {4 5 6} {5 6 4} {4 5 6}
} -body {
    dict values [$r dict {SELECT * FROM t1 INTERSECT SELECT * FROM t2}]
} -cleanup {
    $r destroy
} -result {}


::tcltest::test result_intersect-1.1 {result_intersect:} -constraints {result_intersect} -setup {
    set r [DB new]
    $r create t1 a b c
    $r fillTable t1 {1 2 3} {2 3 1} {3 1 2} {3 1 2}
    $r create t2 a b c
    $r fillTable t2 {2 3 1} {2 3 1} {3 2 1}
} -body {
    dict values [$r dict {SELECT * FROM t1 INTERSECT SELECT * FROM t2}]
} -cleanup {
    $r destroy
} -result {{a b c} {2 3 1}}


::tcltest::test result_except-1.0 {result_except:} -constraints {result_except} -setup {
    set r [DB new]
    $r create t1 a b c
    $r fillTable t1 {1 2 3} {2 3 1} {3 1 2} {3 1 2}
    $r create t2 a b c
    $r fillTable t2 {4 5 6} {5 6 4} {4 5 6}
} -body {
    dict values [$r dict {SELECT * FROM t1 EXCEPT SELECT * FROM t2}]
} -cleanup {
    $r destroy
} -result {{a b c} {1 2 3} {2 3 1} {3 1 2}}


::tcltest::test result_except-1.1 {result_except:} -constraints {result_except} -setup {
    set r [DB new]
    $r create t1 a b c
    $r fillTable t1 {1 2 3} {2 3 1} {3 1 2} {3 1 2}
    $r create t2 a b c
    $r fillTable t2 {2 3 1} {2 3 1} {3 2 1}
} -body {
    dict values [$r dict {SELECT * FROM t1 EXCEPT SELECT * FROM t2}]
} -cleanup {
    $r destroy
} -result {{a b c} {1 2 3} {3 1 2}}


::tcltest::test result_range-1.0 {result_range:} -constraints {result_range} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {1 2} {3 4} {5 6} {7 8} {9 0} {2 1} {4 3} {6 5} {8 7} {0 9}
} -body {
    lrange [dict values [$r dict {SELECT * FROM t1 LIMIT 3}]] 1 end
} -cleanup {
    $r destroy
} -result {{1 2} {3 4} {5 6}}


::tcltest::test result_range-1.1 {result_range:} -constraints {result_range} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {1 2} {3 4} {5 6} {7 8} {9 0} {2 1} {4 3} {6 5} {8 7} {0 9}
} -body {
    lrange [dict values [$r dict {SELECT * FROM t1 LIMIT 4, 4}]] 1 end
} -cleanup {
    $r destroy
} -result {{9 0} {2 1} {4 3} {6 5}}


::tcltest::test result_range-1.2 {result_range:} -constraints {result_range} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {1 2} {3 4} {5 6} {7 8} {9 0} {2 1} {4 3} {6 5} {8 7} {0 9}
} -body {
    lrange [dict values [$r dict {SELECT * FROM t1 LIMIT 2, 99999999}]] 1 end
} -cleanup {
    $r destroy
} -result {{5 6} {7 8} {9 0} {2 1} {4 3} {6 5} {8 7} {0 9}}


    ::tcltest::makeFile "2;a\n11;a\n1;b\n2;b\n11;A\n1;A" a.csv

::tcltest::test result_order_by-1.0 {result_order_by: (force text sorting)} -constraints {result_order_by} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set r [DB new]
    $r create t1 {a text} b
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] a.csv]
} -body {
    dict values [$r dict {SELECT * FROM t1 ORDER BY b COLLATE NOCASE ASC, a}]
} -cleanup {
    $r destroy
    log::lvSuppressLE i 1
    array unset ::options
} -result {{a b} {1 A} {11 a} {11 A} {2 a} {1 b} {2 b}}


::tcltest::test result_order_by-1.1 {result_order_by:} -constraints {result_order_by} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set r [DB new]
    $r create t1 a b
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] a.csv]
} -body {
    dict values [$r dict {SELECT * FROM t1 ORDER BY b COLLATE NOCASE ASC, a}]
} -cleanup {
    $r destroy
    array unset ::options
} -result {{a b} {1 A} {2 a} {11 a} {11 A} {1 b} {2 b}}


::tcltest::test result_order_by-1.2 {result_order_by: (force text sorting)} -constraints {result_order_by} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set r [DB new]
    $r create t1 {a text} b
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] a.csv]
} -body {
    dict values [$r dict {SELECT * FROM t1 ORDER BY b, a}]
} -cleanup {
    $r destroy
    array unset ::options
} -result {{a b} {1 A} {11 A} {11 a} {2 a} {1 b} {2 b}}


::tcltest::test result_order_by-1.3 {result_order_by:} -constraints {result_order_by} -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    set r [DB new]
    $r create t1 a b
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] a.csv]
} -body {
    dict values [$r dict {SELECT * FROM t1 ORDER BY b, a}]
} -cleanup {
    $r destroy
    array unset ::options
} -result {{a b} {1 A} {11 A} {2 a} {11 a} {1 b} {2 b}}


::tcltest::test result_select-1.0 {result_select:} -constraints {result_select} -setup {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}
} -body {
    dict values [$r select -dict t1 a b]
} -cleanup {
    $r destroy
} -result {{a b} {1 2} {2 3} {3 4} {4 1}}


::tcltest::test result_select-1.0 {result_select: -> copy into} -constraints {result_select} -setup {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}
    $r create t2 a b
} -body {
    $r eval {INSERT INTO t2 SELECT a, b FROM t1}
    dict values [$r select -dict t2]
} -cleanup {
    $r destroy
} -result {{a b} {1 2} {2 3} {3 4} {4 1}}


::tcltest::test result_select-1.1 {result_select:} -constraints {result_select} -setup {
} -body {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}
    lrange [dict values [$r dict {SELECT a, b FROM t1 WHERE (a % 2 == 1)}]] 1 end
} -cleanup {
    $r destroy
} -result {{1 2} {3 4}}


    ::tcltest::makeFile "a;b;c;d\n1;2;3;4" a.csv
    ::tcltest::makeFile "5;6;7;8\n6;7;8;5" b.csv

::tcltest::test write_table-1.0 {write_table} -constraints write_table -setup {
    set ::options(-alternate) 0
    set ::options(-separator) \;
    set ::options(-oseparator) \;
    set ::options(-delimiter) \"
    set ::options(-convert-decimal) {read write}
    ::tcltest::makeFile "0;foo\n1;snarf\n2;blue" a.csv
    ::tcltest::makeFile "0;bagel\n1;snatz\n3;driver" b.csv
    set r [DB new]
    $r create t1 foo bar
    $r loadTable t1 [file join [::tcltest::configure -tmpdir] a.csv]
    ::tcltest::makeFile {} output.csv
} -body {
    $r dumpTable t1 [file join [::tcltest::configure -tmpdir] output.csv]
    ::tcltest::viewFile output.csv
} -cleanup {
    $r destroy
    array unset ::options
    log::lvSuppressLE i 1
} -result {foo;bar
0;foo
1;snarf
2;blue}


::tcltest::test validator_one-of-1.0 {one-of:} -constraints {validator_oneOf} -setup {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}
} -body {
    set res {}
    $r eval {SELECT * FROM t1} {
        if {$c ni {1 3}} {
            lappend res $c
        }
    }
    set res
} -cleanup {
    $r destroy
} -result {4 2}


::tcltest::test validator_one-of-1.1 {one-of:} -constraints {validator_oneOf} -setup {
    set r [DB new]
    $r create t1 a b c d
    $r fillTable t1 {1 2 3 4} {2 3 4 1} {3 4 1 2} {4 1 2 3}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE c NOT IN (1, 3)}
} -cleanup {
    $r destroy
} -result {{a b c d} {2 3 4 1} {4 1 2 3}}


::tcltest::test validator_matches-1.0 {matches:} -constraints {validator_matches} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {'fio' 'bar'} {'foo' 'bar'} {'fie' 'baz'} {'foo' 'qux'}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE a LIKE 'f_o'}
} -cleanup {
    $r destroy
} -result {{a b} {fio bar} {foo bar} {foo qux}}


::tcltest::test validator_validate-1.0 {validate:} -constraints {validator_validate} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {'fio' 'bar'} {'foo' 'bar'} {'fie' 'baz'} {'foo' 'qux'}
    $r function validate {regexp {f([aou])\1}}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE validate(a)}
} -cleanup {
    $r destroy
} -result {{a b} {foo bar} {foo qux}}


::tcltest::test validator_validate-1.1 {validate:} -constraints {validator_validate} -setup {
    set r [DB new]
    $r create t1 a b
    $r fillTable t1 {'fio' 'bar'} {'foo' 'bar'} {'fie' 'baz'} {'foo' 'qux'}
    $r function validate {apply {{a b} {expr {
        [regexp {f([aou])\1} $a] && [string match b* $b]
    }}}}
} -body {
    $r dict -values {SELECT * FROM t1 WHERE validate(a, b)}
} -cleanup {
    $r destroy
} -result {{a b} {foo bar}}


::tcltest::cleanupTests
